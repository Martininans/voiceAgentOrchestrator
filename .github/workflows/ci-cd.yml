name: CI/CD Pipeline - Voice Agent Orchestrator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # LINTING AND TESTING
  # ============================================================================
  
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [python, nodejs]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.backend == 'python' && '3.11' || '' }}
      if: matrix.backend == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Set up Node.js ${{ matrix.backend == 'nodejs' && '18' || '' }}
      if: matrix.backend == 'nodejs'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend-node-realtime/package-lock.json
        
    - name: Install Python dependencies
      if: matrix.backend == 'python'
      working-directory: backend-python-orchestrator
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest pytest-asyncio pytest-cov
        
    - name: Install Node.js dependencies
      if: matrix.backend == 'nodejs'
      working-directory: backend-node-realtime
      run: npm ci
      
    - name: Lint Python code
      if: matrix.backend == 'python'
      working-directory: backend-python-orchestrator
      run: |
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        
    - name: Lint Node.js code
      if: matrix.backend == 'nodejs'
      working-directory: backend-node-realtime
      run: |
        npm run lint || echo "No linter configured, skipping..."
        
    - name: Run Python tests
      if: matrix.backend == 'python'
      working-directory: backend-python-orchestrator
      run: |
        pytest tests/ -v --tb=short --cov=app --cov-report=xml || echo "No tests found, skipping..."
        
    - name: Run Node.js tests
      if: matrix.backend == 'nodejs'
      working-directory: backend-node-realtime
      run: |
        npm test || echo "No tests configured, skipping..."

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # BUILD AND PUSH DOCKER IMAGES
  # ============================================================================
  
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Python Orchestrator
      uses: docker/build-push-action@v5
      with:
        context: ./backend-python-orchestrator
        file: ./backend-python-orchestrator/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-orchestrator:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Node.js Realtime
      uses: docker/build-push-action@v5
      with:
        context: ./backend-node-realtime
        file: ./backend-node-realtime/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-realtime:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to AWS ECS Staging
      run: |
        echo "Deploying to AWS ECS staging environment..."
        
        # Update ECS service with new task definition
        aws ecs update-service \
          --cluster voice-agent-staging \
          --service voice-agent-orchestrator-staging \
          --force-new-deployment
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster voice-agent-staging \
          --services voice-agent-orchestrator-staging
        
    - name: Run smoke tests against staging
      run: |
        echo "Running smoke tests against staging..."
        
        # Wait for services to be ready
        sleep 30
        
        # Test orchestrator health
        curl -f ${{ secrets.STAGING_ORCHESTRATOR_URL }}/health || exit 1
        
        # Test realtime health
        curl -f ${{ secrets.STAGING_REALTIME_URL }}/health || exit 1
        
        # Test WebSocket connection
        curl -f ${{ secrets.STAGING_REALTIME_URL }}/ws || exit 1
        
    - name: Notify staging deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to AWS ECS Production
      run: |
        echo "Deploying to AWS ECS production environment..."
        
        # Update ECS service with new task definition
        aws ecs update-service \
          --cluster voice-agent-production \
          --service voice-agent-orchestrator-production \
          --force-new-deployment
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster voice-agent-production \
          --services voice-agent-orchestrator-production
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        
        # Wait for services to be ready
        sleep 30
        
        # Test orchestrator health
        curl -f ${{ secrets.PRODUCTION_ORCHESTRATOR_URL }}/health || exit 1
        
        # Test realtime health
        curl -f ${{ secrets.PRODUCTION_REALTIME_URL }}/health || exit 1
        
        # Test WebSocket connection
        curl -f ${{ secrets.PRODUCTION_REALTIME_URL }}/ws || exit 1
        
    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # POST-DEPLOYMENT TESTS
  # ============================================================================
  
  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Determine which environment to test
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          ORCHESTRATOR_URL=${{ secrets.PRODUCTION_ORCHESTRATOR_URL }}
          REALTIME_URL=${{ secrets.PRODUCTION_REALTIME_URL }}
        else
          ORCHESTRATOR_URL=${{ secrets.STAGING_ORCHESTRATOR_URL }}
          REALTIME_URL=${{ secrets.STAGING_REALTIME_URL }}
        fi
        
        # Test API endpoints
        curl -f "$ORCHESTRATOR_URL/process-intent" \
          -X POST \
          -H "Content-Type: application/json" \
          -d '{"text":"hello","user_id":"test","session_id":"test"}' || exit 1
        
        # Test WebSocket connection
        curl -f "$REALTIME_URL/ws" || exit 1
        
    - name: Performance testing
      run: |
        echo "Running performance tests..."
        
        # Simple load test with curl
        for i in {1..10}; do
          curl -f "$ORCHESTRATOR_URL/health" > /dev/null 2>&1
          sleep 0.1
        done
        
    - name: Generate deployment report
      run: |
        echo "## Deployment Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.deploy-production.result == 'success' && 'Production' || 'Staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # ROLLBACK (Manual Trigger)
  # ============================================================================
  
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Rollback to previous version
      run: |
        echo "Rolling back to previous version..."
        
        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster voice-agent-production \
          --services voice-agent-orchestrator-production \
          --query 'services[0].taskDefinition' \
          --output text)
        
        # Update service to use previous task definition
        aws ecs update-service \
          --cluster voice-agent-production \
          --service voice-agent-orchestrator-production \
          --task-definition $PREVIOUS_TASK_DEF
        
        echo "Rollback completed"
        
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: '🔄 Production rollback completed'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }} 