version: '3.8'

services:
  # Python Orchestrator Backend
  orchestrator:
    build:
      context: ./backend-python-orchestrator
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      # Voice Provider Configuration
      - VOICE_PROVIDER=${VOICE_PROVIDER:-exotel}
      # Exotel Configuration
      - EXOTEL_SID=${EXOTEL_SID}
      - EXOTEL_TOKEN=${EXOTEL_TOKEN}
      - EXOTEL_PHONE_NUMBER=${EXOTEL_PHONE_NUMBER}
      # Azure/AOAI configuration from env.prod as applicable
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - SECTOR=generic
      - DEBUG=${DEBUG:-false}
    volumes:
      - ./backend-python-orchestrator:/app
      - chroma_data:/app/chroma_db
    depends_on:
      - redis
      - chromadb
    networks:
      - voice-agent-network
    restart: unless-stopped

  # Node.js Realtime Backend
  realtime:
    build:
      context: ./backend-node-realtime
    env_file:
      - ./backend-node-realtime/.env
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - HOST=0.0.0.0
      - VOICE_PROVIDER=${VOICE_PROVIDER:-exotel}
      # Exotel Configuration
      - EXOTEL_SID=${EXOTEL_SID}
      - EXOTEL_TOKEN=${EXOTEL_TOKEN}
      - EXOTEL_PHONE_NUMBER=${EXOTEL_PHONE_NUMBER}
      - EXOTEL_WEBHOOK_URL=${EXOTEL_WEBHOOK_URL:-http://localhost:3000/voice/webhook}
      # Other Configuration
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - ORCHESTRATOR_TIMEOUT=30000
      - ORCHESTRATOR_RETRIES=3
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      - CORS_CREDENTIALS=${CORS_CREDENTIALS:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}
    depends_on:
      - orchestrator
      - redis
    networks:
      - voice-agent-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - voice-agent-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:0.5.9
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - voice-agent-network
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - orchestrator
      - realtime
    networks:
      - voice-agent-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
  chroma_data:

networks:
  voice-agent-network:
    driver: bridge 